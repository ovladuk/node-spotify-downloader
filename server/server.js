// Generated by CoffeeScript 1.10.0
(function() {
  var Config, app, bodyParser, exec, express, io, root, run, server, sk;

  bodyParser = require('body-parser');

  exec = require('child_process').exec;

  express = require('express');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  require('colors');

  Config = {
    DOMAIN: 'localhost',
    PORT: 3001,
    EXECUTABLE: 'node main.js'
  };

  server.listen(Config.PORT, Config.DOMAIN, (function(_this) {
    return function() {
      return console.log(("Server running at http://" + Config.DOMAIN + ":" + Config.PORT).green);
    };
  })(this));

  app.use('/assets', express["static"](__dirname + '/assets'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  root = (function(_this) {
    return function(req, res) {
      return res.sendFile(__dirname + '/index.html');
    };
  })(this);

  app.get('/', root);

  run = (function(_this) {
    return function(req, response) {
      var addParam, b, cmdline, format, ls, params, ref;
      if (!sk) {
        console.error("Something went wrong. Socket is not started, try to refresh browser page or restart server".red);
        return null;
      }
      params = "";
      addParam = function(optName, optValue) {
        if (!!optValue) {
          return params += " " + optName + " " + optValue;
        }
      };
      b = req.body;
      addParam('--fbuid', b.fbuid);
      addParam('--fbtoken', b.fbtoken);
      addParam('--username', b.username);
      addParam('--password', b.password);
      addParam('--captcha', (ref = b['g-recaptcha-response-1']) != null ? ref[0] : void 0);
      addParam('--uri', b.uri);
      addParam('--directory', b.directory);
      format = b.format.trim();
      if (!!b.folder) {
        addParam('--folder', !!format ? "\"" + format + "\"" : "");
      }
      cmdline = Config.EXECUTABLE + " " + params;
      console.log(cmdline);
      ls = exec(cmdline);
      ls.stdout.on('data', function(data) {
        return sk.emit('progress', {
          progress: data
        });
      });
      ls.stderr.on('data', function(data) {
        if (data.trim().length) {
          console.log(("" + data).red);
        }
        return sk.emit('progress', {
          progress: data
        });
      });
      return ls.on('exit', function(data) {});
    };
  })(this);

  app.post('/run', run);

  sk = null;

  io.set('origins', "*" + Config.DOMAIN + ":" + Config.PORT);

  io.on('connection', (function(_this) {
    return function(socket) {
      return sk = socket;
    };
  })(this));

}).call(this);
